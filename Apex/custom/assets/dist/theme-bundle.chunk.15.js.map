{"version":3,"sources":["webpack:///./assets/js/theme/contact-us.js","webpack:///./assets/js/theme/common/nod.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/nod-functions/min-max-validate.js"],"names":["ContactUs","onReady","this","registerContactFormValidation","formSelector","contactUsValidator","nod","submit","$contactForm","$","add","selector","validate","cb","val","forms","email","errorMessage","context","contactEmail","notEmpty","contactQuestion","on","event","performCheck","areAll","preventDefault","PageManager","classes","errorClass","successClass","errorMessageClass","checkFunctions","minMaxValidate","value","test","password","length","minInputSelector","maxInputSelector","minValue","parseFloat","maxValue"],"mappings":"yRAIqBA,E,iLACjBC,QAAA,WACIC,KAAKC,iC,EAGTA,8BAAA,WACI,IAAMC,EAAe,0BACfC,EAAqBC,YAAI,CAC3BC,OAAWH,EAAL,0BAEJI,EAAeC,EAAEL,GAEvBC,EAAmBK,IAAI,CACnB,CACIC,SAAaP,EAAL,+BACRQ,SAAU,SAACC,EAAIC,GAGXD,EAFeE,IAAMC,MAAMF,KAI/BG,aAAcf,KAAKgB,QAAQC,cAE/B,CACIR,SAAaP,EAAL,qCACRQ,SAAU,SAACC,EAAIC,GAGXD,EAFeE,IAAMK,SAASN,KAIlCG,aAAcf,KAAKgB,QAAQG,mBAInCb,EAAac,GAAG,UAAU,SAAAC,GACtBlB,EAAmBmB,eAEfnB,EAAmBoB,OAAO,UAI9BF,EAAMG,qB,GAxCqBC,M,kDCJvC,+BAIArB,IAAIsB,QAAQC,WAAa,oBACzBvB,IAAIsB,QAAQE,aAAe,sBAC3BxB,IAAIsB,QAAQG,kBAAoB,qBAGhCzB,IAAI0B,eAAe,WAAaC,IAEjB3B,MAAf,G,iCCeeS,IA1BD,CACVC,MADU,SACJkB,GAEF,MADW,aACDC,KAAKD,IAQnBE,SAXU,SAWDF,GACL,OAAOhC,KAAKkB,SAASc,IASzBd,SArBU,SAqBDc,GACL,OAAOA,EAAMG,OAAS,K,oECLfJ,IAff,SAAwBK,EAAkBC,GAYtC,OAXA,SAAkB1B,GACd,IAAM2B,EAAWC,WAAWhC,EAAE6B,GAAkBxB,OAC1C4B,EAAWD,WAAWhC,EAAE8B,GAAkBzB,OAEhD,OAAI4B,EAAWF,GAAY,IAAQE,IAAa,IAAQF,GAC7C3B,GAAG,GAGPA,GAAG,O","file":"theme-bundle.chunk.15.js","sourcesContent":["import PageManager from './page-manager';\nimport nod from './common/nod';\nimport forms from './common/models/forms';\n\nexport default class ContactUs extends PageManager {\n    onReady() {\n        this.registerContactFormValidation();\n    }\n\n    registerContactFormValidation() {\n        const formSelector = 'form[data-contact-form]';\n        const contactUsValidator = nod({\n            submit: `${formSelector} input[type=\"submit\"]`,\n        });\n        const $contactForm = $(formSelector);\n\n        contactUsValidator.add([\n            {\n                selector: `${formSelector} input[name=\"contact_email\"]`,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.contactEmail,\n            },\n            {\n                selector: `${formSelector} textarea[name=\"contact_question\"]`,\n                validate: (cb, val) => {\n                    const result = forms.notEmpty(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.contactQuestion,\n            },\n        ]);\n\n        $contactForm.on('submit', event => {\n            contactUsValidator.performCheck();\n\n            if (contactUsValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n}\n","import nod from 'nod-validate';\nimport minMaxValidate from './nod-functions/min-max-validate';\n\n// Hook our SCSS framework form field status classes into the nod validation system before use\nnod.classes.errorClass = 'form-field--error';\nnod.classes.successClass = 'form-field--success';\nnod.classes.errorMessageClass = 'form-inlineMessage';\n\n// Register validate functions\nnod.checkFunctions['min-max'] = minMaxValidate;\n\nexport default nod;\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","import _ from 'lodash';\n\nfunction minMaxValidate(minInputSelector, maxInputSelector) {\n    function validate(cb) {\n        const minValue = parseFloat($(minInputSelector).val());\n        const maxValue = parseFloat($(maxInputSelector).val());\n\n        if (maxValue > minValue || _.isNaN(maxValue) || _.isNaN(minValue)) {\n            return cb(true);\n        }\n\n        return cb(false);\n    }\n\n    return validate;\n}\n\nexport default minMaxValidate;\n"],"sourceRoot":""}