# TODO: Cap db:push should support rollback or backup in some way
# TODO: Better handling of database creation - perhaps make the deploy user a database admin?

load 'deploy' if respond_to?(:namespace) # cap2 differentiator
Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) }
load 'config/deploy.rb'

require 'capistrano/ext/multistage'


namespace :setup do
	desc "setup development environment"
		task :environment,  :roles => :web do
			domains.each do |domain|
			# Setup permissions
			# TODO if necessary
			
			#config settings
			# Setup local config files		      
			database_configuration = <<-EOF
<?php

	  define('DB_NAME', '#{short_name(domain)}');
	
	  /** MySQL database username */
	  define('DB_USER', '#{tiny_name(domain)}');
	
	  /** MySQL database password */
	  define('DB_PASSWORD', '#{db_pass}');
	
	  /** MySQL hostname */
	  define('DB_HOST', 'localhost');
	
	  define('DOMAIN_CURRENT_SITE', '#{app_url}');
				
			  EOF
			File.open("#{app_root}/local-config.php", 'w') {|f| f.write(database_configuration) }
		 end
	end
	
	after "setup:environment",
		"db:create",
		"db:update"
end

namespace :deploy do

	desc "check production task"
	task :check_production, :roles => :web do
		if stage.to_s == "prod"
			puts "\n Are you REALLY sure you want to deploy to production?"
			puts " Enter the password to continue "
			password = STDIN.gets[0..9] rescue nil
			if password != 'production'
				puts "\n !!! WRONG PASSWORD !!!"
				exit
			end
		end
	end

  desc "Prepares one or more servers for deployment."
  task :setup, :roles => :web, :except => { :no_release => true } do
    dirs = [deploy_to, releases_path, shared_path]
    domains.each do |domain|
      dirs += [shared_path + "/#{domain}/files"]
      dirs += [shared_path + "/#{domain}/files/avatars"]
      dirs += [shared_path + "/#{domain}/files/uploads"]
      dirs += [shared_path + "/#{domain}/files/blogs.dir"]
      dirs += [shared_path + "/#{domain}/files/w3tc"]
      dirs += [shared_path + "/#{domain}/files/cache"]
    end
    dirs += %w(system).map { |d| File.join(shared_path, d) }
    run "mkdir -m 0775 -p #{dirs.join(' ')}"
    # add setgid bit, so that files/ contents are always in the httpd group
    run "chmod 2775 #{shared_path}/*/files"
    run "chmod 2775 #{shared_path}/*/files/avatars"
    run "chmod 2775 #{shared_path}/*/files/uploads"
    run "chmod 2775 #{shared_path}/*/files/blogs.dir"
    run "chmod 2775 #{shared_path}/*/files/w3tc"
    run "chmod 2775 #{shared_path}/*/files/cache"
    ###run "chgrp #{httpd_group} #{shared_path}/*/files"
    ###run "chgrp #{httpd_group} #{shared_path}/*/files/*"
  end

  desc "Create local local_config.php in shared/config"
  task :create_settings_php, :roles => :web do
    domains.each do |domain|
        configuration = <<-EOF
<?php

  define('DB_NAME', '#{short_name(domain)}');

  /** MySQL database username */
  define('DB_USER', '#{tiny_name(domain)}');

  /** MySQL database password */
  define('DB_PASSWORD', '#{db_pass}');

  /** MySQL hostname */
  define('DB_HOST', 'localhost');

  define('DOMAIN_CURRENT_SITE', '#{app_url}');
EOF

      put configuration, "#{deploy_to}/#{shared_dir}/#{domain}/local-config.php"
    end
  end

  desc "link file dirs and the local_settings.php to the shared copy"
  task :symlink_files, :roles => :web do
    domains.each do |domain|
      # link settings file
      run "ln -nfs #{deploy_to}/#{shared_dir}/#{domain}/local-config.php #{release_path}/#{app_root}/local-config.php"
      # Link Various files directories (uploads, w3tc, avatars, cache)
      run "ln -nfs #{deploy_to}/#{shared_dir}/#{domain}/files/uploads #{release_path}/#{app_root}/wp-content/uploads"
      run "ln -nfs #{deploy_to}/#{shared_dir}/#{domain}/files/blogs.dir #{release_path}/#{app_root}/wp-content/blogs.dir"
      run "ln -nfs #{deploy_to}/#{shared_dir}/#{domain}/files/w3tc #{release_path}/#{app_root}/wp-content/w3tc"
      run "ln -nfs #{deploy_to}/#{shared_dir}/#{domain}/files/avatars #{release_path}/#{app_root}/wp-content/avatars"
      run "ln -nfs #{deploy_to}/#{shared_dir}/#{domain}/files/cache #{release_path}/#{app_root}/wp-content/cache"
    end
  end

  # desc '[internal] Touches up the released code.'
  task :finalize_update, :except => { :no_release => true } do
    run "chmod -R g+w #{release_path}"
    run "chmod 644 #{release_path}/#{app_root}/wp-config.php"
  end
    
  task :install_wordpress, roles => :web do
  	run "wp core download"
  	run "wp core install"
  end

  task :set_apache_symlink, roles => :web do
	  run "ln -nfs #{deploy_to}/current/#{app_root} #{apache_www_path}#{application}"
  end
  
  task :run_grunt, roles => :web do
  	run "cd #{deploy_to}/current && #{sudo} npm install"
  	run "cd #{deploy_to}/current && grunt staging" 
  end

  # Each of the following tasks are Rails specific. They're removed.
  task :migrate do
  end

  task :migrations do
  end

  task :cold do
  end

  task :start do
  end

  task :stop do
  end

  task :restart, :roles => :web do
  end

  after "deploy:setup",
    "deploy:create_settings_php",
    "db:create"

  after "deploy:update_code",
    "deploy:symlink_files"

  after "deploy",
    "deploy:set_apache_symlink",
    "deploy:run_grunt"
    
    before "deploy", 
    	"deploy:check_production"
    	
    before "deploy:setup",
    	"deploy:check_production"

end

namespace :db do
  desc "Download a backup of the database(s) from the given stage."
  task :down, :roles => :db, :only => { :primary => true } do
    domains.each do |domain|
      filename = "#{domain}_#{stage}.sql"
      temp = "/tmp/#{release_name}_#{application}_#{filename}"
      run "touch #{temp} && chmod 600 #{temp}"
      run_locally "mkdir -p db"
      run("mysqldump --opt --compress -u root --password=#{db_root_pass} #{short_name(domain)} > #{temp}")
      download("#{temp}", "db/#{filename}", :via=> :scp)
      
      # replace sams.dev
      search = "#{app_root_url}"
      replace = "sams.dev"
      puts "searching (#{search}) and replacing (#{replace}) domain information"
      run_locally "cp db/#{filename} db/#{filename}.bak"
      run_locally "sed -e 's/#{search}/#{replace}/g' db/#{filename}.bak > db/#{filename}"
      
      #replace catalyst
      search = "#{app_root_url_for_catalyst_site}"
      replace = "catalyst.dev"
      puts "searching (#{search}) and replacing (#{replace}) domain information"
      run_locally "cp db/#{filename} db/#{filename}.bak"
      run_locally "sed -e 's/#{search}/#{replace}/g' db/#{filename}.bak > db/#{filename}"
      
       #replace research
      search = "#{app_root_url_for_research_site}"
      replace = "msresearch.dev"
      puts "searching (#{search}) and replacing (#{replace}) domain information"
      run_locally "cp db/#{filename} db/#{filename}.bak"
      run_locally "sed -e 's/#{search}/#{replace}/g' db/#{filename}.bak > db/#{filename}"
      
      run "rm #{temp}"
    end
  end

  desc "Download and apply a backup of the database(s) from the given stage."
  task :update, :roles => :db, :only => { :primary => true } do
    domains.each do |domain|
      filename = "#{domain}_#{stage}.sql"
      password = "#{db_local_root_pass}"
      if (password.empty?)
	      system "mysql -u root #{dev_short_name(domain)} < db/#{filename}"
      else
     	 system "mysql -u root --password=#{db_local_root_pass} #{dev_short_name(domain)} < db/#{filename}"	
      end
    end
  end

  desc "Upload database(s) to the given stage."
  task :push, :roles => :db, :only => { :primary => true } do
    domains.each do |domain|
      filename = "#{domain}_#{stage}.sql"
      temp = "/tmp/#{release_name}_#{application}_#{filename}"
      run "touch #{temp} && chmod 600 #{temp}"
      #replace for sams
      replace = "#{app_root_url}"
      search = "sams.dev"
      puts "searching (#{search}) and replacing (#{replace}) domain information"
      run_locally "cp db/#{filename} db/#{filename}.bak"
      run_locally "sed -e 's/#{search}/#{replace}/g' db/#{filename}.bak > db/#{filename}"
      
      #replace for catalyst
      replace = "#{app_root_url_for_catalyst_site}"
      search = "catalyst.dev"
      puts "searching (#{search}) and replacing (#{replace}) domain information"
      run_locally "cp db/#{filename} db/#{filename}.bak"
      run_locally "sed -e 's/#{search}/#{replace}/g' db/#{filename}.bak > db/#{filename}"
      
       #replace for research
      replace = "#{app_root_url_for_research_site}"
      search = "msresearch.dev"
      puts "searching (#{search}) and replacing (#{replace}) domain information"
      run_locally "cp db/#{filename} db/#{filename}.bak"
      run_locally "sed -e 's/#{search}/#{replace}/g' db/#{filename}.bak > db/#{filename}"
      
      upload("db/#{filename}", "#{temp}", :via=> :scp)
      password = "#{db_root_pass}"
      if (password.empty?)
	      run "mysql -u root #{short_name(domain)} < #{temp}"
      else
	      run "mysql -u root --password=#{db_root_pass} #{short_name(domain)} < #{temp}"
      end
      run "rm #{temp}"
    end
  end

  desc "Create database"
  task :create, :roles => :db, :only => { :primary => true } do
    # Create and gront privs to the new db user
    domains.each do |domain|
      create_sql = "CREATE DATABASE IF NOT EXISTS \\\`#{short_name(domain)}\\\` ;
                    GRANT ALL ON \\\`#{short_name(domain)}\\\`.* TO '#{tiny_name(domain)}'@'localhost' IDENTIFIED BY '#{db_pass}';
                    FLUSH PRIVILEGES;"
      password = "#{db_local_root_pass}"
      if (password.empty?)
		run "mysql -u root -e \"#{create_sql}\""	      
      else
	      run "mysql -u root -p#{db_local_root_pass} -e \"#{create_sql}\""
      end
      puts "Using pass: #{db_pass}"
    end
  end

   after "db:down",
    "db:update"
  
end

namespace :files do
  desc "Download a backup of the wp-content (minus themes + plugins) directory from the given stage."
  task :down, :roles => :web do
    domains.each do |domain|
      if exists?(:gateway)
        run_locally("rsync --recursive --times --omit-dir-times --chmod=ugo=rwX --rsh='ssh #{ssh_options[:user]}@#{gateway} ssh  #{ssh_options[:user]}@staging.cultivatedcode.com' --compress --human-readable --progress :#{deploy_to}/#{shared_dir}/#{domain}/files/uploads Site/wp-content")
        run_locally("rsync --recursive --times --omit-dir-times --chmod=ugo=rwX --rsh='ssh #{ssh_options[:user]}@#{gateway} ssh  #{ssh_options[:user]}@staging.cultivatedcode.com' --compress --human-readable --progress :#{deploy_to}/#{shared_dir}/#{domain}/files/blogs.dir Site/wp-content")
      else
        run_locally("rsync --recursive --times --omit-dir-times --chmod=ugo=rwX --rsh=ssh --compress --human-readable --progress #{ssh_options[:user]}@staging.cultivatedcode.com:#{deploy_to}/#{shared_dir}/#{domain}/files/uploads Site/wp-content")
        run_locally("rsync --recursive --times --omit-dir-times --chmod=ugo=rwX --rsh=ssh --compress --human-readable --progress #{ssh_options[:user]}@staging.cultivatedcode.com:#{deploy_to}/#{shared_dir}/#{domain}/files/blogs.dir Site/wp-content")
      end
    end
  end

  desc "Push a backup of the wp-content (minus themes + plugins) directory from the given stage."
  task :push, :roles => :web do
    domains.each do |domain|
      if exists?(:gateway)
        run_locally("rsync --recursive --times --omit-dir-times --chmod=ugo=rwX --rsh='ssh #{ssh_options[:user]}@#{gateway} ssh  #{ssh_options[:user]}@staging.cultivatedcode.com' --compress --human-readable --progress Site/wp-content/uploads/ :#{deploy_to}/#{shared_dir}/#{domain}/files/")
      else
        run_locally("rsync --recursive --times --omit-dir-times --chmod=ugo=rwX --rsh=ssh --compress --human-readable --progress Site/wp-content/uploads/ #{ssh_options[:user]}@staging.cultivatedcode.com:#{deploy_to}/#{shared_dir}/#{domain}/files/")
      end
    end
  end
end

def short_name(domain=nil)
  return "#{application}_#{stage}_#{domain}".gsub('.', '_')[0..63] if domain && domain != 'default'
  return "#{application}_#{stage}".gsub('.', '_')[0..63]
end

def tiny_name(domain=nil)
  return "#{application[0..5]}_#{stage.to_s[0..2]}_#{domain[0..4]}".gsub('.', '_') if domain && domain != 'default'
  return "#{application[0..11]}_#{stage.to_s[0..2]}".gsub('.', '_')
end

def dev_short_name(domain=nil)
  return "#{application}_dev_#{domain}".gsub('.', '_')[0..63] if domain && domain != 'default'
  return "#{application}_dev".gsub('.', '_')[0..63]
end

def random_password(size = 16)
  chars = (('A'..'Z').to_a + ('a'..'z').to_a + ('0'..'9').to_a) - %w(i o 0 1 l 0)
  (1..size).collect{|a| chars[rand(chars.size)] }.join
end